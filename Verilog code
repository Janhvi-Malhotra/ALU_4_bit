module ALU_1(input [3:0] A,B,
           input [3:0] ALU_sel,
           output [4:0] ALU_out,
           output wire ALU_carry

    );
    reg [4:0] ALU_result;
    wire [4:0] tmp;
    assign ALU_out= ALU_result;
    assign tmp ={1'b0,A}+{1'b0,B};
    assign ALU_carry = tmp[4];
    always@(*)// senstivity list 
    begin 
    case(ALU_sel)
    4'b0000 :  //Addition
    ALU_result= A+B;
    4'b0001 :  //Subtraction
    ALU_result= A-B;
    4'b0010 : //Multiplication
    ALU_result= A*B;
     4'b0011 : //Division
       ALU_result= A/B;
       4'b0100: //logic shift left
       ALU_result= A<<1;
       4'b0101: //logic shift right
       ALU_result= A>>1;
       4'b0110: //rotate left 
    ALU_result= {A[2:0],A[3]};
     4'b0111: //rotate right 
    ALU_result= {A[0],A[3:1]};
    4'b1000: //logical and
       ALU_result= A&B;
       4'b1001://logical or
       ALU_result= A|B;
       4'b1010://logical xor
       ALU_result= A^B;
       4'b1011://logical nor
    ALU_result= ~(A|B);
    4'b1100://logical nand
      ALU_result= ~(A&B);
       4'b1101://logical xnor
    ALU_result= ~(A^B);
    4'b1110://greater than 
    ALU_result= (A>B)? 4'd1:4'd0;
     4'b1111://equal to
     ALU_result= (A==B)? 4'd1:4'd0; 
     default:ALU_result=A+B;
     endcase
     end
    
endmodule
